<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Aggregate_Columns_Description" xml:space="preserve">
    <value>The column indexes or column names to apply the aggregation. If not specified, the aggregation will be applied in all possible columns</value>
    <comment>property description</comment>
  </data>
  <data name="Aggregate_Description" xml:space="preserve">
    <value>Aggregates the data of a DataTable by the specified aggregate function</value>
    <comment>activity description</comment>
  </data>
  <data name="Aggregate_Detached_Description" xml:space="preserve">
    <value>Returns a data row detached from the data table</value>
    <comment>property description</comment>
  </data>
  <data name="Aggregate_Function_Description" xml:space="preserve">
    <value>The aggregate function</value>
    <comment>property description</comment>
  </data>
  <data name="Aggregate_InputDataTable_Description" xml:space="preserve">
    <value>The data table which the aggregate function will be applied</value>
    <comment>property description</comment>
  </data>
  <data name="Aggregate_Result_Description" xml:space="preserve">
    <value>The aggregate DataRow</value>
    <comment>property description</comment>
  </data>
  <data name="CheckPoint_Data_Description" xml:space="preserve">
    <value>A collection of key/value pairs that provide additional user-defined information about the exception</value>
    <comment>property description</comment>
  </data>
  <data name="CheckPoint_Description" xml:space="preserve">
    <value>Checks if a given expression is true, if not, thrown the specified exception</value>
    <comment>activity description</comment>
  </data>
  <data name="CheckPoint_Exception_Description" xml:space="preserve">
    <value>The exception that will be thrown if the expression is not true</value>
    <comment>property description</comment>
  </data>
  <data name="CheckPoint_Expression_Description" xml:space="preserve">
    <value>The expression to be evaluated</value>
    <comment>property description</comment>
  </data>
  <data name="Common_Category" xml:space="preserve">
    <value>Common</value>
    <comment>category</comment>
  </data>
  <data name="Common_ContinueOnError" xml:space="preserve">
    <value>If set, continue executing the remaining activities even if the current activity has failed</value>
    <comment>property description</comment>
  </data>
  <data name="Common_Timeout" xml:space="preserve">
    <value>Specifies the amount of time in milliseconds to wait for the activity to run before an error is thrown. The default value is 30000 (30s)</value>
    <comment>property description</comment>
  </data>
  <data name="Container_Description" xml:space="preserve">
    <value>Its a wrapper that when combined with Exit Activity, interrupts the children execution flow exiting the Container beforehand</value>
    <comment>activity description</comment>
  </data>
  <data name="CultureScope_CultureName_Description" xml:space="preserve">
    <value>The desired culture, eg.: en-US, pt-BR, jp-JP, etc</value>
    <comment>property description</comment>
  </data>
  <data name="CultureScope_Description" xml:space="preserve">
    <value>Changes the culture of the current thread and then restore it after the activity execution is completed. Note that this activity does not create a new thread. Therefore, its not recommended use it into a Parallel activity since it can generate unexpected results</value>
    <comment>activity description</comment>
  </data>
  <data name="DataRowToDictionary_Description" xml:space="preserve">
    <value>Converts a DataRow to Dictionary</value>
    <comment>activity description</comment>
  </data>
  <data name="DataRowToDictionary_InputDataRow_Description" xml:space="preserve">
    <value>The input DataRow</value>
    <comment>property description</comment>
  </data>
  <data name="DataRowToDictionary_OutputDictionary_Description" xml:space="preserve">
    <value>The output Dictionary</value>
    <comment>property description</comment>
  </data>
  <data name="Decrement_Description" xml:space="preserve">
    <value>Decrements the value of a variable by the specified decrement value</value>
    <comment>activity description</comment>
  </data>
  <data name="Decrement_ErrorMsg_MinValue" xml:space="preserve">
    <value>The decrement value cannot be smaller than 1</value>
    <comment>error message</comment>
  </data>
  <data name="Decrement_Value_Description" xml:space="preserve">
    <value>The decrement value</value>
    <comment>property description</comment>
  </data>
  <data name="Decrement_Variable_Description" xml:space="preserve">
    <value>The variable to decrement</value>
    <comment>property description</comment>
  </data>
  <data name="DecryptDataTable_Algorithm_Description" xml:space="preserve">
    <value>The decrypt algorithm to be used by this activity</value>
    <comment>property description</comment>
  </data>
  <data name="DecryptDataTable_Columns_Description" xml:space="preserve">
    <value>The column indexes or column names to be decrypted</value>
    <comment>property description</comment>
  </data>
  <data name="DecryptDataTable_Description" xml:space="preserve">
    <value>Decrypts the data of a DataTable using the specified algorithm and key</value>
    <comment>activity description</comment>
  </data>
  <data name="DecryptDataTable_InputDataTable_Description" xml:space="preserve">
    <value>The DataTable to be decrypted</value>
    <comment>property description</comment>
  </data>
  <data name="DecryptDataTable_Iterations_Description" xml:space="preserve">
    <value>The number of iterations to be used in operation. The default and minimum recommended is 1000</value>
    <comment>property description</comment>
  </data>
  <data name="DecryptDataTable_Key_Description" xml:space="preserve">
    <value>The key used to decrypt the data</value>
    <comment>property description</comment>
  </data>
  <data name="DecryptDataTable_OutputDataTable_Description" xml:space="preserve">
    <value>The decrypted DataTable</value>
    <comment>property description</comment>
  </data>
  <data name="DecryptDataTable_ParallelProcessing_Description" xml:space="preserve">
    <value>Uses parallel processing to scan through the DataTable and decrypt the data. Although this can drastically increase the processing speed, the rows in the resulting DataTable may have its order changed. Combine it with Sort property to reorder the DataTable when necessary</value>
    <comment>property description</comment>
  </data>
  <data name="DecryptDataTable_Sort_Description" xml:space="preserve">
    <value>Sets the sort column or columns, and sort order for the output DataTable. The value must be a string that contains the column name followed by "ASC" (ascending) or "DESC" (descending). Columns are sorted ascending by default. Multiple columns can be separated by commas</value>
    <comment>property description</comment>
  </data>
  <data name="DecryptDataTable_TextEncoding_Description" xml:space="preserve">
    <value>The encoding used to interpret the data and key</value>
    <comment>property description</comment>
  </data>
  <data name="DecryptText_Algorithm_Description" xml:space="preserve">
    <value>The decrypt algorithm to be used by this activity</value>
    <comment>property description</comment>
  </data>
  <data name="DecryptText_Description" xml:space="preserve">
    <value>Decrypts the text using the specified algorithm and key</value>
    <comment>activity description</comment>
  </data>
  <data name="DecryptText_Iterations_Description" xml:space="preserve">
    <value>The number of iterations to be used in operation. The default and minimum recommended is 1000</value>
    <comment>property description</comment>
  </data>
  <data name="DecryptText_Key_Description" xml:space="preserve">
    <value>The key used to decrypt the text</value>
    <comment>property description</comment>
  </data>
  <data name="DecryptText_Result_Description" xml:space="preserve">
    <value>The decrypted text</value>
    <comment>property description</comment>
  </data>
  <data name="DecryptText_TextEncoding_Description" xml:space="preserve">
    <value>The encoding used to interpret the text and key</value>
    <comment>property description</comment>
  </data>
  <data name="DecryptText_Text_Description" xml:space="preserve">
    <value>The text to be decrypted</value>
    <comment>property description</comment>
  </data>
  <data name="DictionaryToDataTable_Description" xml:space="preserve">
    <value>Converts a Dictionary to DataTable</value>
    <comment>activity description</comment>
  </data>
  <data name="DictionaryToDataTable_InputDictionary_Description" xml:space="preserve">
    <value>The input Dictionary</value>
    <comment>property description</comment>
  </data>
  <data name="DictionaryToDataTable_OutputDataTable_Description" xml:space="preserve">
    <value>The output DataTable</value>
    <comment>property description</comment>
  </data>
  <data name="EncryptDataTable_Algorithm_Description" xml:space="preserve">
    <value>The encrypt algorithm to be used by this activity</value>
    <comment>property description</comment>
  </data>
  <data name="EncryptDataTable_ColumnNames_Description" xml:space="preserve">
    <value>The column names to be encrypted</value>
    <comment>property description</comment>
  </data>
  <data name="EncryptDataTable_Columns_Description" xml:space="preserve">
    <value>The column indexes or column names to be encrypted</value>
    <comment>property description</comment>
  </data>
  <data name="EncryptDataTable_Description" xml:space="preserve">
    <value>Encrypts the data of a DataTable using the specified algorithm and key</value>
    <comment>activity description</comment>
  </data>
  <data name="EncryptDataTable_InputDataTable_Description" xml:space="preserve">
    <value>The DataTable to be encrypted</value>
    <comment>property description</comment>
  </data>
  <data name="EncryptDataTable_Iterations_Description" xml:space="preserve">
    <value>The number of iterations to be used in operation. The default and minimum recommended is 1000</value>
    <comment>property description</comment>
  </data>
  <data name="EncryptDataTable_Key_Description" xml:space="preserve">
    <value>The key used to encrypt the data</value>
    <comment>property description</comment>
  </data>
  <data name="EncryptDataTable_OutputDataTable_Description" xml:space="preserve">
    <value>The encrypted DataTable</value>
    <comment>property description</comment>
  </data>
  <data name="EncryptDataTable_ParallelProcessing_Description" xml:space="preserve">
    <value>Uses parallel processing to scan through the DataTable and encrypt the data. Although this can drastically increase the processing speed, the rows in the resulting DataTable may have its order changed. Combine it with Sort property to reorder the DataTable when necessary</value>
    <comment>property description</comment>
  </data>
  <data name="EncryptDataTable_Sort_Description" xml:space="preserve">
    <value>Sets the sort column or columns, and sort order for the output DataTable. The value must be a string that contains the column name followed by "ASC" (ascending) or "DESC" (descending). Columns are sorted ascending by default. Multiple columns can be separated by commas</value>
    <comment>property description</comment>
  </data>
  <data name="EncryptDataTable_TextEncoding_Description" xml:space="preserve">
    <value>The encoding used to interpret the data and key</value>
    <comment>property description</comment>
  </data>
  <data name="EncryptText_Algorithm_Description" xml:space="preserve">
    <value>The encrypt algorithm to be used by this activity</value>
    <comment>property description</comment>
  </data>
  <data name="EncryptText_Description" xml:space="preserve">
    <value>Encrypts a text using the specified algorithm and key</value>
    <comment>activity description</comment>
  </data>
  <data name="EncryptText_DisplayName" xml:space="preserve">
    <value>Encrypt Text</value>
    <comment>activity name</comment>
  </data>
  <data name="EncryptText_Iterations_Description" xml:space="preserve">
    <value>The number of iterations to be used in operation. The default and minimum recommended is 1000</value>
    <comment>property description</comment>
  </data>
  <data name="EncryptText_Key_Description" xml:space="preserve">
    <value>The key used to encrypt the text</value>
    <comment>property description</comment>
  </data>
  <data name="EncryptText_Result_Description" xml:space="preserve">
    <value>The base64 string representation of the encrypted text</value>
    <comment>property description</comment>
  </data>
  <data name="EncryptText_TextEncoding_Description" xml:space="preserve">
    <value>The encoding used to interpret the text and key</value>
    <comment>property description</comment>
  </data>
  <data name="EncryptText_Text_Description" xml:space="preserve">
    <value>The text to be encrypted</value>
    <comment>property description</comment>
  </data>
  <data name="EnumerateFiles_Description" xml:space="preserve">
    <value>Returns an enumerable collection of full file names that match a search pattern (or collection of patterns) and enumeration options in a specified path (or collection of paths)</value>
    <comment>activity description</comment>
  </data>
  <data name="EnumerateFiles_Exclusions_Description" xml:space="preserve">
    <value>Excludes from the enumeration the files with any of the specified attributes</value>
    <comment>property description</comment>
  </data>
  <data name="EnumerateFiles_Path_Description" xml:space="preserve">
    <value>The relative or absolute path (or collection of paths) to the directory (or directories) to search</value>
    <comment>property description</comment>
  </data>
  <data name="EnumerateFiles_Result_Description" xml:space="preserve">
    <value>An enumerable collection of the full names (including paths) for the files in the directory specified by path and that match the specified search pattern and option</value>
    <comment>property description</comment>
  </data>
  <data name="EnumerateFiles_SearchOption_Description" xml:space="preserve">
    <value>Specifies whether the search operation should include only the current directory or should include all subdirectories</value>
    <comment>property description</comment>
  </data>
  <data name="EnumerateFiles_SearchPattern_Description" xml:space="preserve">
    <value>The search string to match against the names of files in path. This parameter  can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions. It also supports a collection of strings</value>
    <comment>property description</comment>
  </data>
  <data name="Exit_Description" xml:space="preserve">
    <value>Exits from the Container or Iterate Activities interrupting any child executions after it</value>
    <comment>activity description</comment>
  </data>
  <data name="Increment_Description" xml:space="preserve">
    <value>Increments the value of a variable by the specified increment value</value>
    <comment>activity description</comment>
  </data>
  <data name="Increment_ErrorMsg_MinValue" xml:space="preserve">
    <value>The increment value cannot be smaller than 1</value>
    <comment>error message</comment>
  </data>
  <data name="Increment_Value_Description" xml:space="preserve">
    <value>The increment value</value>
    <comment>property description</comment>
  </data>
  <data name="Increment_Variable_Description" xml:space="preserve">
    <value>The variable to be incremented</value>
    <comment>property description</comment>
  </data>
  <data name="InputOutput_Category" xml:space="preserve">
    <value>Reference</value>
    <comment>category</comment>
  </data>
  <data name="Input_Category" xml:space="preserve">
    <value>Input</value>
    <comment>category</comment>
  </data>
  <data name="Iterate_Description" xml:space="preserve">
    <value>Iterates the activity execution for the specified number of times</value>
    <comment>activity description</comment>
  </data>
  <data name="Iterate_ErrorMsg_IterationsMinValue" xml:space="preserve">
    <value>Iterations must have a value greater than zero</value>
    <comment>error message</comment>
  </data>
  <data name="Iterate_Index_Description" xml:space="preserve">
    <value>The zero-based iteration index</value>
    <comment>property description</comment>
  </data>
  <data name="Iterate_Iterations_Description" xml:space="preserve">
    <value>The number of iterations that must be run</value>
    <comment>property description</comment>
  </data>
  <data name="Next_Description" xml:space="preserve">
    <value>Skips the current iteration in an Iterate activity and proceeds the execution with the next iteration</value>
    <comment>activity description</comment>
  </data>
  <data name="Options_Category" xml:space="preserve">
    <value>Options</value>
    <comment>category</comment>
  </data>
  <data name="Output_Category" xml:space="preserve">
    <value>Output</value>
    <comment>category</comment>
  </data>
  <data name="PromoteHeaders_AutoRename_Description" xml:space="preserve">
    <value>When true, it avoids the "column name already belongs to DataTable" error by adding a numeric suffix to it</value>
    <comment>property description</comment>
  </data>
  <data name="PromoteHeaders_Description" xml:space="preserve">
    <value>Promotes the first row of values to new column headers</value>
    <comment>activity description</comment>
  </data>
  <data name="PromoteHeaders_InputDataTable_Description" xml:space="preserve">
    <value>The input DataTable</value>
    <comment>property description</comment>
  </data>
  <data name="PromoteHeaders_OutputDataTable_Description" xml:space="preserve">
    <value>The output DataTable</value>
    <comment>property description</comment>
  </data>
  <data name="Reference_Category" xml:space="preserve">
    <value>Reference</value>
    <comment>category</comment>
  </data>
  <data name="RemoveEmptyRows_Columns_Description" xml:space="preserve">
    <value>The column indexes or column names to verify</value>
    <comment>property description</comment>
  </data>
  <data name="RemoveEmptyRows_CustomOptions_Category" xml:space="preserve">
    <value>Options (Custom Mode)</value>
    <comment>category</comment>
  </data>
  <data name="RemoveEmptyRows_Description" xml:space="preserve">
    <value>Removes the empty rows from a DataTable</value>
    <comment>activity description</comment>
  </data>
  <data name="RemoveEmptyRows_InputDataTable_Description" xml:space="preserve">
    <value>The input DataTable</value>
    <comment>property description</comment>
  </data>
  <data name="RemoveEmptyRows_Mode_Description" xml:space="preserve">
    <value>Determines when a row should be removed. (All) means that all columns must be empty to remove the row. (Any) for any column empty and (Custom) for the user defined rules</value>
    <comment>property description</comment>
  </data>
  <data name="RemoveEmptyRows_Operator_Description" xml:space="preserve">
    <value>Determines how evaluate the custom columns</value>
    <comment>property description</comment>
  </data>
  <data name="RemoveEmptyRows_OutputDataTable_Description" xml:space="preserve">
    <value>The output DataTable</value>
    <comment>property description</comment>
  </data>
  <data name="Unzip_Description" xml:space="preserve">
    <value>Decompress files from a zip archive</value>
    <comment>activity description</comment>
  </data>
  <data name="Unzip_ErrorMsg_DirNameWithData" xml:space="preserve">
    <value>Zip entry name ends in directory separator character but contains data</value>
    <comment>error message</comment>
  </data>
  <data name="Unzip_ErrorMsg_OutsideDir" xml:space="preserve">
    <value>Extracting Zip entry would have resulted in a file outside the specified destination directory</value>
    <comment>error message</comment>
  </data>
  <data name="Unzip_ExtractTo_Description" xml:space="preserve">
    <value>The path to the folder where files will be extracted</value>
    <comment>property description</comment>
  </data>
  <data name="Unzip_Overwrite_Description" xml:space="preserve">
    <value>When true, overwrites an existing file that has the same name as the destination file</value>
    <comment>property description</comment>
  </data>
  <data name="Unzip_ZipFilePath_Description" xml:space="preserve">
    <value>The compressed file</value>
    <comment>property description</comment>
  </data>
  <data name="Validation_ScopeError" xml:space="preserve">
    <value>Cannot be used outside of {0} activity</value>
    <comment>validation</comment>
  </data>
  <data name="Validation_TypeError" xml:space="preserve">
    <value>Please provide a value of type {0} for {1}</value>
    <comment>validation</comment>
  </data>
  <data name="Validation_ValueError" xml:space="preserve">
    <value>Please provide a value for {0}</value>
    <comment>validation</comment>
  </data>
  <data name="WaitFile_Description" xml:space="preserve">
    <value>Waits until the file be available</value>
    <comment>activity description</comment>
  </data>
  <data name="WaitFile_ErrorMsg_FilePathDoesNotExists" xml:space="preserve">
    <value>The specified file path does not exists</value>
    <comment>error message</comment>
  </data>
  <data name="WaitFile_ErrorMsg_IntervalRange" xml:space="preserve">
    <value>The accepted value range is between {0} and {1}. The value will be reseted to its nearest limit</value>
    <comment>error message</comment>
  </data>
  <data name="WaitFile_FileInfo_Description" xml:space="preserve">
    <value>(Optional) Returns the information about the file</value>
    <comment>property description</comment>
  </data>
  <data name="WaitFile_FilePath_Description" xml:space="preserve">
    <value>The storage path of the file</value>
    <comment>property description</comment>
  </data>
  <data name="WaitFile_Interval_Description" xml:space="preserve">
    <value>Specifies the amount of time (in milliseconds) for the file re-check. Any values out of the range of 100-30000 milliseconds is reseted to its nearest limit. The default value is 500</value>
    <comment>property description</comment>
  </data>
  <data name="WaitFile_Timeout_Description" xml:space="preserve">
    <value>The maximum timeout to wait in milliseconds</value>
    <comment>property description</comment>
  </data>
  <data name="WaitFile_WaitForExist_Description" xml:space="preserve">
    <value>Waits until the file exists</value>
    <comment>property description</comment>
  </data>
  <data name="Zip_AutoRenaming_Description" xml:space="preserve">
    <value>When true, renames the entry if the entry's name already exists in zip archive. It uses the pattern &lt;entry&gt;.&lt;counter&gt;.&lt;extension&gt;</value>
    <comment>property description</comment>
  </data>
  <data name="Zip_CompressionLevel_Description" xml:space="preserve">
    <value>One of the enumeration values that indicates whether to emphasize speed or compression</value>
    <comment>property description</comment>
  </data>
  <data name="Zip_Description" xml:space="preserve">
    <value>Compress files into a zip archive</value>
    <comment>activity description</comment>
  </data>
  <data name="Zip_FilesCount_Description" xml:space="preserve">
    <value>Returns the amount of files added to zip archive</value>
    <comment>property description</comment>
  </data>
  <data name="Zip_TextEncoding_Description" xml:space="preserve">
    <value>The encoding to use when writing entry names in this archive. Specify a value for this parameter only when an encoding is required for interoperability with zip archive tools and libraries that do not support UTF-8 encoding for entry names</value>
    <comment>property description</comment>
  </data>
  <data name="Zip_ToCompress_Description" xml:space="preserve">
    <value>The path of the file(s) or folder(s) that will be compressed. Can be a string or a collection of strings</value>
    <comment>property description</comment>
  </data>
  <data name="Zip_ZipFilePath_Description" xml:space="preserve">
    <value>The path of the zip archive</value>
    <comment>property description</comment>
  </data>
</root>